[{"title":"移动应用开发","date":"2016-07-22T07:08:32.000Z","path":"2016/07/22/移动应用开发/","text":"#移动应用开发 1、布局种类静态（Static layout）固定死的宽和高 流式布局（Liquid layout）只有一套布局页面元素随着窗口大小而改变，通俗的讲：就是百分比布局，或者用em/rem替换px 响应式（Responsive layout）为不同屏幕定义不同的布局（媒体查询）同时，在每个布局中，应用流式布局，即页面元素宽度随着屏幕调整而自动适配使一个网站能兼容多个终端—而不是为每个终端做一个特定的版本这个概念是为了解决移动互联网浏览而诞生的 2、viewport 视口三种视口layout viewport (布局视口) 浏览器默认的viewport 比屏幕尺寸要宽visual viewport (可视视口) 可以看到的区域大小 随用户的缩放改变ideal viewport (理想视口) 最适合布局的视口，我们需要通过mate标签来得到理想视口 在浏览器上调整窗口大小，通过媒体查询看到网页的响应能力是乎没有任何问题的。 在移动端浏览页面时就出现异常了。 （没有进行Viewport控制的iPhone6上的显示效果） 页面虽然可以看到，但不能自适应手机的屏幕。之所以会有这样的问题，是设备尺寸和Viewport尺寸不一致导致的。为了更好的理解这两个尺寸之间的不同点，下面就简单说说： 设备像素：这个是物理层面的像素数量，比如一台iPhone6，是375x667像素。（注：这里所说的设备像素有两种类型，硬件像素和设备独立像素，不过这个区别与此文无关）； CSS像素：这个是我们在CSS使用过程中的一个抽象的单位，它并没有一个绝对的尺寸，页面上单个CSS像素的大小完全取决于Viewport的大小； Viewport：Viewport决定了页面的像素密度。比如一个宽750px的Viewport，表示屏幕上横向排布了750个CSS像素（Viewport在未缩放的情况下）。 Viewport是”无关设备”的，它不知道也不关心我们的设备到底有多大的屏幕。 可以设置meta标签中的viewport信息，以解决Viewport尺寸不匹配的问题。meta标签的用法如下： 1&lt;meta name=&quot;viewport&quot; content=&quot;key=value, key=value&quot;&gt; 设备像素比http://dpi.lv/ 设备像素(device pixel):设备像素设是物理概念，指的是设备中使用的物理像素。比如iPhone 5的分辨率640 x 1136px。 CSS像素(css pixel):CSS像素是Web编程的概念，指的是CSS样式代码中使用的逻辑像素。在CSS规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px是一个相对单位，相对的是设备像素(device pixel)。 比如iPhone 5使用的是Retina视网膜屏幕，使用2px x 2px的 device pixel 代表 1px x 1px 的 css pixel，所以设备像素数为640 x 1136px，而CSS逻辑像素数为320 x 568px。 设备像素与CSS像素之间的换算是如何产生的呢？这就需要要谈到每英寸像素(pixel per inch)和设备像素比(device pixel ratio)。 每英寸像素(pixel per inch)：ppi，表示每英寸所拥有的像素(pixel)数目，数值越高，代表显示屏能够以越高的密度显示图像。ppi的计算方式可以参考维基百科每英寸像素 设备像素比(device pixel ratio)：以上计算出ppi是为了得到密度分界，获得默认缩放比例，即设备像素比。由上图可知，ppi在120-160之间的手机被归为低密度手机，160-240被归为中密度，240-320被归为高密度，320以上被归为超高密度（Apple给了它一个高大上的名字——Retina）。 获得设备像素比后，便可得知设备像素与CSS像素之间的比例。当这个比率为1:1时，使用1个设备像素显示1个CSS像素。当这个比率为2:1时，使用4个设备像素显示1个CSS像素，当这个比率为3:1时，使用9（3*3）个设备像素显示1个CSS像素。 想要了解主流移动设备的设备像素比(device pixel ratio)可以参考以下两个网站：http://screensiz.es/http://www.devicepixelratio.com/ meta标签content属性的值标签内容中有6个关键字： width height initial-scale minimum-scale maximum-scale user-scalable width= height=width=device-width height=device-height让当前的viewport宽/高度等于设备的宽/高度，也可以可以设置一个固定的值，尽可能不这样使用。height是设置高度使用的，我们很少使用 initial-scaleinitial-scale=1.0设置初始化的缩放比例（0.25 — 10.0，我们设置为1就是没有缩放） maximum-scalemaximum-scale=1.0设置最大缩放比例（0.25 — 10.0） minimum-scaleminimum-scale=1.0设置最小缩放比例（0.25 — 10.0） user-scalableuser-scalable=no是否允许用户缩放值​ yes(默认) / 1​ no / 0​ 如果设置为no，那么minimax-scale和maximum-scale将被忽略，因为不允许缩放 WIDTH 可以用width来设置viewport的宽度，以替代那些不合适的默认宽度。 我们可以给其设定一个固定大小，但设定成device-width更加明智一些，这样可以兼容不同大小的屏幕。 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; （在iPhone6上设置width=device-width之后的显示效果） INITIAL-SCALE 在移动设备上，用户有时会需要缩放页面，当页面缩放时，Viewport的像素尺寸也会相应的改变，但CSS尺寸不会变。 比如，在一个400px宽的Viewport中有一个元素，设定width: 100px;，这时该元素就横跨了1/4的屏幕。如果用户把页面放大到两倍大小，这时Viewport宽度变成了200px，但元素仍然宽100个CSS像素。这时这个元素就占了半个屏幕了。 我们可以通过initial-scale来设置CSS像素和Viewport像素之间的比例，通常情况下是1:1。这个参数的设置可以很好的解决width=device-width设置所带来的问题。有些移动设备浏览器会在纵向模式时默认使用设备宽度，当切换到横向模式时页面显示就会不正常。 （在没有设置initial-scale的横向iPhone6上的显示效果） 如图所示，当iPhone处于横向模式时，我们看到的还是宽度小余500px时的页面状态。不过不要慌张，我们可以通过设置initial-scale为1来解决这个问题。 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; （在设置了initial-scale的横向iPhone6上的显示效果） USER-SCALABLE，MAXIMUM-SCALE以及MINIMUM-SCALE 这几个参数用来控制页面的缩放能力。 Maximum-scale：这个是用户可以缩放页面的最大比例。比如说设置为1，用户就无法缩放页面。假如设置为2，用户就可以把页面放大到1个CSS像素等于2个Viewport像素的大小； Minimum-scale：这个是用户可以缩放页面的最小比例。假如设置为2，页面的最小比例就是原比例的两倍，并且无法缩小到原始比例； User-scalable：如果设置了user-scalable=no，用户将无法对页面进行缩放。 由于这几个参数限制了用户对页面的操作，通常不建议使用它们。 用CSS来控制Viewport虽然现在很多人都在用viewport，但其实viewport并不是HTML5标准中的正式成员。W3C目前正在研究将viewport以@viewport规则的形式加入到CSS当中，@viewport规则与viewport标签有异曲同工之妙，只是将用于布局的viewport归还给CSS，现在已经有部分开发者在尝试@viewport了。 12345678910@viewport &#123; zoom: 1.0; /* same as initial-scale=1 */ width: device-width;&#125;/* Vendor specific prefixes */@-ms-viewport @-webkit-viewport @-moz-viewport @-o-viewport 在@viewport正式发布之前，还是先继续使用viewport标签吧，如果有兴趣的话可以尝试一下测试版的@viewport。 3、媒体查询媒体查询让CSS可以更精确作用于不同的设备类型和同一设备的不同条件（如屏幕尺寸） Media Type 设备类型常见的有screen(电脑显示屏)，all(所有设备)，print(打印用纸或打印预览图)等 Media Query 媒体特性可以看成Media Type(判断条件) + CSS(符合条件的样式规则)，常用的设备特性有width，height，device-width(设备屏幕的输出宽度)等大部分媒体特性都接收min和max前缀，用于表达：大于或等于 和 小于或等于 使用方法媒体类型 and （媒体特性）可以多个媒体特性一起使用，用关键字and连接如果没有指出媒体类型，则默认为all可以使用多条语句，将同一样式应用到不同的媒体以特性中，语句用“，”隔开 not关键字排除符合表达式的设备如@media not print and (min-width: 900px){}，样式将被使用在除打印设备和屏幕宽度大于900的所有设备上 only关键字可以让支持media type 而不支持媒体查询的浏览器忽略掉这段代码 实现方式1. link标签设置通过link标签的media属性设置 2. @mediacss样式表中内嵌@media，css3新特性，媒体查询: @media screen and (max-width: 700px) and (min-width: 500px) {​ css样式} 123456789101112131415161718192021222324/* min-width：屏幕最小宽度是1200px（大于大等于1200px）*/@media only screen and (min-width: 1200px) &#123; &#125;/* 最小是992，最大是1199 （大于等于801px并且小于等于1199px） */@media only screen and (min-width: 801px) and (max-width: 1199px) &#123; body&#123; background-color: red; &#125;&#125;/* 注意：801 到 991 之间 没有条件的话，就用默认样式 */@media only screen and (min-width: 600px) and (max-width: 800px) &#123; body&#123; background-color: blue; &#125;&#125;@media only screen and (max-width: 599px) &#123; body&#123; background-color: yellow; &#125;&#125; 还可以设置设备像素比，可用于大屏幕尺寸适应: http://blog.madewithdrew.com/post/working-with-dppx/ 12345678@media only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (min--moz-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 1.3 / 1), only screen and (min-resolution: 1.3dppx), only screen and (min-resolution: 125dpi) &#123; &#125; 4、图片自适应:处理图片缩放的方法 简单的解决方法可以使用百分比，会放大或者缩小图片。那么可以尝试给图片指定的最大宽度为百分比。假如图片超过了，就缩小。假如图片小了，就原尺寸输出。 1img &#123; width: auto; max-width: 100%; &#125; 用::before和::after伪元素 +content 属性来动态显示一些内容或者做其它很酷的事情，在 css3 中，任何元素都可以使用 content 属性了，这个方法就是结合 css3 的 attr 属性和 HTML 自定义属性的功能： HTML 结构： 1234&lt;img src=&quot;image.jpg&quot; data-src-600px=&quot;image-600px.jpg&quot; data-src-800px=&quot;image-800px.jpg&quot; alt=&quot;&quot;&gt; CSS 控制： 1234567891011@media (min-device-width:600px) &#123; img[data-src-600px] &#123; content: attr(data-src-600px, url); &#125;&#125;@media (min-device-width:800px) &#123; img[data-src-800px] &#123; content: attr(data-src-800px, url); &#125;&#125; 5、em、rem布局的实现百分比尺寸百分比​ width: 20%;位置百分比​ top: 50%;保留小数点后5位​ 3.12345% em相对单位，1em就是1个字符的大小 ，即font-size的大小font-size是可继承得，如果元素没有font-size，em会继承父级元素的字体大小 remfont size of the root elementCSS3的单位相对于根元素的font-size，即html标签 http://www.w3cplus.com/css/when-to-use-em-vs-rem.html​​","tags":[{"name":"移动端","slug":"移动端","permalink":"http://yoursite.com/tags/移动端/"},{"name":"响应式布局","slug":"响应式布局","permalink":"http://yoursite.com/tags/响应式布局/"}]}]